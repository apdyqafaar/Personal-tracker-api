
openapi: 3.0.3
info:
  title: Personal Finance Tracker API
  version: 1.0.0
  description: Backend API for Personal Finance Tracker

servers:
  - url: http://localhost:3000
    description: Local Development
  - url: https://personal-tracker-api-z0z2.onrender.com
    description: Production (Render)

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: Authentication routes
  - name: Transactions
    description: Transactions routes
  - name: Upload
    description: Profile image upload
  - name: Admin
    description: Admin-only routes

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: strongpassword123

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: strongpassword123

    Transaction:
      type: object
      required:
        - title
        - amount
        - type
        - category
        - date
      properties:
        title:
          type: string
          example: Grocery shopping
        amount:
          type: number
          example: 50
        type:
          type: string
          enum: [income, expense]
          example: expense
        category:
          type: string
          example: Food
        date:
          type: string
          format: date
          example: 2025-07-10

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Unauthorized

  /auth/update:
    put:
      tags:
        - Auth
      summary: Update user profile by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 60d21b4667d0d8992e610c85
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Updated user info
        '401':
          description: Unauthorized

  /trans:
    get:
      tags:
        - Transactions
      summary: Get all transactions for logged in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized

    post:
      tags:
        - Transactions
      summary: Add new transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction created
        '401':
          description: Unauthorized

  /trans/{id}:
    put:
      tags:
        - Transactions
      summary: Update transaction by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Transaction updated
        '404':
          description: Transaction not found
        '401':
          description: Unauthorized

    delete:
      tags:
        - Transactions
      summary: Delete transaction by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction deleted
        '404':
          description: Transaction not found
        '401':
          description: Unauthorized

  /upload-profile:
    post:
      tags:
        - Upload
      summary: Upload profile image
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: https://res.cloudinary.com/demo/image/upload/v12345/profile.jpg
        '401':
          description: Unauthorized

  /admin:
    get:
      tags:
        - Admin
      summary: Admin welcome
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Welcome message for admin
          content:
            application/json:
              schema:
                type: string
                example: "wellcome to admin"
        '403':
          description: Forbidden

  /admin/get-all-trans:
    get:
      tags:
        - Admin
      summary: Get all transactions for admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all transactions for admin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '403':
          description: Forbidden
